"""
This type stub file was generated by pyright.
"""

from .errors import ProgrammingError

SUPPORT_IMPLICIT_GROUPBY = ...
class CompilationError(ProgrammingError):
    def __init__(self, message, ast=...) -> None:
        ...
    


class Compiler:
    def __init__(self, context) -> None:
        ...
    
    def compile(self, query, parameters=...): # -> None:
        """Compile an AST into an executable statement."""
        ...
    


def transform_journal(journal): # -> Any:
    """Translate a Journal entry into an uncompiled Select statement.

    Args:
      journal: An instance of a Journal object.
    Returns:
      An instance of an uncompiled Select object.
    """
    ...

def transform_balances(balances): # -> Any:
    """Translate a Balances entry into an uncompiled Select statement.

    Args:
      balances: An instance of a Balance object.
    Returns:
      An instance of an uncompiled Select object.
    """
    ...

def get_target_name(target):
    """Compute the target name.

    This uses the same algorithm used by SQLite. If the target has an
    AS clause assigning it a name, that will be the name used. If the
    target refers directly to a column, then the target name is the
    column name. Otherwise use the expression text.

    """
    ...

def get_columns_and_aggregates(node): # -> tuple[list[Any], list[Any]]:
    """Find the columns and aggregate nodes below this tree.

    All nodes under aggregate nodes are ignored.

    Args:
      node: An instance of EvalNode.
    Returns:
      A pair of (columns, aggregates), both of which are lists of EvalNode instances.
        columns: The list of all columns accessed not under an aggregate node.
        aggregates: The list of all aggregate nodes.
    """
    ...

def is_aggregate(node): # -> bool:
    """Return true if the node is an aggregate.

    Args:
      node: An instance of EvalNode.
    Returns:
      A boolean.
    """
    ...

def compile(context, statement, parameters=...): # -> None:
    ...

