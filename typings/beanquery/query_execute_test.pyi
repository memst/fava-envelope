"""
This type stub file was generated by pyright.
"""

import unittest
from beancount.parser import cmptest
from beanquery import query_compile as qc, tables

__copyright__ = ...
__license__ = ...
class QueryBase(cmptest.TestCase):
    INPUT = ...
    maxDiff = ...
    def setUp(self): # -> None:
        ...
    
    def compile(self, query):
        ...
    
    def check_query(self, input_string, query, expected_types, expected_rows): # -> None:
        ...
    
    def assertResult(self, query, result, datatype=...): # -> None:
        ...
    
    def assertError(self, query): # -> None:
        ...
    


class CommonInputBase(unittest.TestCase):
    INPUT = ...


class TestFundamentals(QueryBase):
    INPUT = ...
    def test_type_casting(self): # -> None:
        ...
    
    def test_operators(self): # -> None:
        ...
    
    def test_operators_type_inference(self): # -> None:
        ...
    
    def test_functions(self): # -> None:
        ...
    
    def test_coalesce(self): # -> None:
        ...
    
    def test_count(self): # -> None:
        ...
    
    def test_getitem(self): # -> None:
        ...
    
    def test_getatrr(self): # -> None:
        ...
    
    def test_parse_date(self): # -> None:
        ...
    
    def test_date_part(self): # -> None:
        ...
    
    def test_date_trunc(self): # -> None:
        ...
    
    def test_interval_ops(self): # -> None:
        ...
    


class TestBeancountFunctions(QueryBase):
    INPUT = ...
    def test_root(self): # -> None:
        ...
    
    def test_open_date(self): # -> None:
        ...
    
    def test_close_date(self): # -> None:
        ...
    
    def test_open_meta(self): # -> None:
        ...
    
    def test_commodity_meta(self): # -> None:
        ...
    
    def test_account_sortkey(self): # -> None:
        ...
    
    def test_has_account(self): # -> None:
        ...
    
    def test_convert(self): # -> None:
        ...
    


class TestBeancountMetadataFunctions(QueryBase):
    INPUT = ...
    def test_meta(self): # -> None:
        ...
    
    def test_entry_meta(self): # -> None:
        ...
    
    def test_any_meta(self): # -> None:
        ...
    


class TestFilterEntries(CommonInputBase, QueryBase):
    @staticmethod
    def filter_entries(query): # -> list[Any]:
        ...
    
    def test_filter_empty_from(self):
        ...
    
    def test_filter_by_year(self):
        ...
    
    def test_filter_by_expr1(self):
        ...
    
    def test_filter_by_expr2(self):
        ...
    
    def test_filter_close_undated(self):
        ...
    
    def test_filter_close_dated(self):
        ...
    
    def test_filter_open_dated(self):
        ...
    
    def test_filter_clear(self):
        ...
    


class TestExecutePrint(CommonInputBase, QueryBase):
    def test_print_with_filter(self):
        ...
    
    def test_print_with_no_filter(self):
        ...
    


class TestAllocation(unittest.TestCase):
    def test_allocator(self): # -> None:
        ...
    


class TestExecuteNonAggregatedQuery(QueryBase):
    INPUT = ...
    def test_non_aggregate__one(self): # -> None:
        ...
    
    def test_non_aggregate__many(self): # -> None:
        ...
    
    def test_non_aggregated_order_by_visible(self): # -> None:
        ...
    
    def test_non_aggregated_order_by_invisible(self): # -> None:
        ...
    
    def test_non_aggregated_order_by_none_date(self): # -> None:
        ...
    
    def test_non_aggregated_order_by_none_str(self): # -> None:
        ...
    


class TestExecuteAggregatedQuery(QueryBase):
    INPUT = ...
    def test_aggregated_group_by_all_implicit(self): # -> None:
        ...
    
    def test_aggregated_group_by_all_explicit(self): # -> None:
        ...
    
    def test_aggregated_group_by_visible(self): # -> None:
        ...
    
    def test_aggregated_group_by_invisible(self): # -> None:
        ...
    
    def test_aggregated_group_by_visible_order_by_non_aggregate_visible(self): # -> None:
        ...
    
    def test_aggregated_group_by_visible_order_by_non_aggregate_invisible(self): # -> None:
        ...
    
    def test_aggregated_group_by_visible_order_by_aggregate_visible(self): # -> None:
        ...
    
    def test_aggregated_group_by_visible_order_by_aggregate_invisible(self): # -> None:
        ...
    
    def test_aggregated_group_by_invisible_order_by_non_aggregate_visible(self): # -> None:
        ...
    
    def test_aggregated_group_by_invisible_order_by_non_aggregate_invis(self): # -> None:
        ...
    
    def test_aggregated_group_by_invisible_order_by_aggregate_visible(self): # -> None:
        ...
    
    def test_aggregated_group_by_invisible_order_by_aggregate_invisible(self): # -> None:
        ...
    
    def test_aggregated_group_by_with_having(self): # -> None:
        ...
    


class TestExecuteOptions(QueryBase):
    INPUT = ...
    def test_order_by_asc_implicit(self): # -> None:
        ...
    
    def test_order_by_asc_explicit(self): # -> None:
        ...
    
    def test_order_by_desc(self): # -> None:
        ...
    
    def test_distinct(self): # -> None:
        ...
    
    def test_limit(self): # -> None:
        ...
    


class TestOrderBy(QueryBase):
    data = ...
    def test_order_by_asc_asc(self): # -> None:
        ...
    
    def test_order_by_asc_desc(self): # -> None:
        ...
    
    def test_order_by_desc_asc(self): # -> None:
        ...
    
    def test_order_by_desc_desc(self): # -> None:
        ...
    


class TestArithmeticFunctions(QueryBase):
    def test_add(self): # -> None:
        ...
    
    def test_sub(self): # -> None:
        ...
    
    def test_mul(self): # -> None:
        ...
    
    def test_div(self): # -> None:
        ...
    


class TestExecutePivot(QueryBase):
    def setUp(self): # -> None:
        ...
    
    def execute(self, query): # -> tuple[list[tuple[Any, Any]], list[Any] | list[tuple[Any, ...]]]:
        ...
    
    data = ...
    def test_pivot_one_column(self): # -> None:
        ...
    
    def test_pivot_one_column_by_name(self): # -> None:
        ...
    
    def test_pivot_two_column(self): # -> None:
        ...
    


class TestExecuteSubquery(QueryBase):
    def execute(self, query): # -> tuple[list[tuple[Any, Any]], list[Any] | list[tuple[Any, ...]]]:
        ...
    
    def test_subquery(self): # -> None:
        ...
    


class SimpleColumn(qc.EvalColumn):
    def __init__(self, name, func, dtype) -> None:
        ...
    
    def __call__(self, row):
        ...
    


class SimpleTable(tables.Table):
    columns = ...
    def __init__(self, name, nrows) -> None:
        ...
    
    def __iter__(self): # -> Generator[int, Any, None]:
        ...
    


class TestExecuteTables(QueryBase):
    def setUp(self): # -> None:
        ...
    
    def execute(self, query):
        ...
    
    def test_null_table(self):
        ...
    
    def test_simple_table(self):
        ...
    
    def test_simple_table_aggregation(self):
        ...
    


class TestInSubquery(QueryBase):
    data = ...
    def test_in_subquery(self): # -> None:
        ...
    


