"""
This type stub file was generated by pyright.
"""

import datetime
import enum
from decimal import Decimal
from beancount.core import amount, inventory, position

"""Rendering of rows.
"""
__copyright__ = ...
__license__ = ...
class Align(enum.Enum):
    LEFT = ...
    RIGHT = ...


class RenderContext:
    """Hold the query rendering configuration."""
    def __init__(self, dcontext, expand=..., listsep=..., spaced=..., null=...) -> None:
        ...
    


RENDERERS = ...
class ColumnRenderer:
    """Base class for classes that render column values.

    The column renderers are responsible to render uniform type values
    in a way that will align nicely in a column whereby all the values
    render to the same width.

    The formatters are instantiated and are feed all the values in the
    column via the ``update()`` method to accumulate the dimensions it
    will need to format them later on. The ``prepare()`` method then
    computes internal status required to format these values in
    consistent fashion. The ``width()`` method can then be used to
    retrieve the computer maximum width of the column. Individual
    values are formatted with the ``format()`` method. Values are
    assumed to be of the expected type for the formatter. Formatting
    values outside the set of the values fed via the ``update()``
    method is undefined behavior.

    """
    dtype = ...
    align = ...
    def __init__(self, ctx) -> None:
        ...
    
    def __init_subclass__(cls, **kwargs): # -> None:
        ...
    
    def update(self, value): # -> None:
        """Update the rendered with the given value.

        Args:
          value: Any object of type ``dtype``.

        """
        ...
    
    def prepare(self): # -> int:
        """Prepare to render the column.

        Returns:
          Computed column width.

        """
        ...
    
    @property
    def width(self): # -> int:
        ...
    
    def format(self, value):
        """Format the value.

        Args:
          value: Any object of type ``dtype``.

        Returns:
          A string or list of strings representing the rendered value.

        """
        ...
    


class ObjectRenderer(ColumnRenderer):
    dtype = object
    def update(self, value): # -> None:
        ...
    
    def format(self, value): # -> str:
        ...
    


class DictRenderer(ObjectRenderer):
    dtype = dict


class BoolRenderer(ColumnRenderer):
    dtype = bool
    def update(self, value): # -> None:
        ...
    
    def format(self, value): # -> Literal['TRUE', 'FALSE']:
        ...
    


class StringRenderer(ObjectRenderer):
    dtype = str


class SetRenderer(ColumnRenderer):
    dtype = set
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def format(self, value):
        ...
    


class DateRenderer(ColumnRenderer):
    dtype = datetime.date
    def update(self, value): # -> None:
        ...
    
    def format(self, value):
        ...
    


class IntRenderer(ObjectRenderer):
    dtype = int
    align = ...


class EnumRenderer(ObjectRenderer):
    dtype = enum.Enum
    def format(self, value):
        ...
    


class DecimalRenderer(ColumnRenderer):
    """Renderer for Decimal numbers.

    Numbers are left padded to align on the decimal point::

      -  123.40
      -    5.000
      -  -67

    """
    dtype = Decimal
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def prepare(self): # -> int:
        ...
    
    def format(self, value): # -> str:
        ...
    


class AmountRenderer(ColumnRenderer):
    """Renderer for Amount instances.

    The numerical part is formatted with the right quantization
    determined by ``dcontext`` in the rendering context and aligned on
    the decimal point across rows. Numbers are right padded with
    spaces to alignt the commodity symbols across rows::

      -  1234.00   USD
      -    42      TEST
      -     0.0001 ETH
      -   567.00   USD

    """
    dtype = amount.Amount
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def prepare(self): # -> int:
        ...
    
    def format(self, value): # -> str:
        ...
    


class CostRenderer(ObjectRenderer):
    dtype = ...
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def prepare(self): # -> int:
        ...
    
    def format(self, value): # -> str:
        ...
    


class PositionRenderer(ColumnRenderer):
    """Renderer for Position instrnaces.

    Both the unit numbers and the cost numbers are aligned::

      -    5.000 HOOL {500.23  USD }
      -  123     CA   {  1.000 HOOL}
      -    3.00  USD
      -   42.000 HOOL
      -    3.00  AAPL
      -    3.0   XY

    """
    dtype = position.Position
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def prepare(self): # -> int:
        ...
    
    def format(self, value): # -> str:
        ...
    


class InventoryRenderer(ColumnRenderer):
    """Renderer for Inventory instances.

    Inventories renders as a list of position strings. The format used
    differs whether expansion of list-like values to multiple rows in
    enabled or not.

    When row expansion is enabled, positions in each inventory values
    are sorted alphabetically by commodity symbol and are formatted
    with the same position formatter, resulting in all commodity
    strings to be aligned::

      -  1234.00   USD
           42      TEST
      -     0.0001 ETH
          567.00   USD

    When row expansion is disabled, the position formatters are unique
    for each commodity symbol and the values are rendered in a table
    like structure. The positions appear sorted by frequency of
    occurence in the column and alphabetically by commodity symbol::

      - 1234.00 USD 0.0001 ETH
      -  567.00 USD            42 TEST

    The separator between positions is determined by ``listsep`` in
    the rendering context.

    """
    dtype = inventory.Inventory
    def __init__(self, ctx) -> None:
        ...
    
    def update(self, value): # -> None:
        ...
    
    def prepare(self): # -> int:
        ...
    
    @staticmethod
    def positionsortkey(position): # -> tuple[Any, Any, tuple[Any, Any, Any] | tuple[()]]:
        ...
    
    def format(self, value): # -> list[Any]:
        ...
    


def render_rows(rows, renderers, ctx): # -> Generator[list[Any] | Any | list[str], Any, None]:
    """Render results set row."""
    ...

def render_text(columns, rows, dcontext, file, expand=..., boxed=..., spaced=..., listsep=..., nullvalue=..., narrow=..., unicode=..., **kwargs): # -> None:
    """Render the result of executing a query in text format.

    Args:
      columns: A list of beanquery.Column descrining the table columns.
      rows: Data to render.
      dcontext: A DisplayContext object prepared for rendering numbers.
      file: A file object to render the results to.
      expand: When true expand columns that render to lists to multiple rows.
      boxed: When true draw an ascii-art table borders.
      spaced: When true insert an empty line between rows.
      listsep: String to use to separate values in list-like column values.
      nullvalue: String to use to represent NULL values.
      narrow: When true truncate headers to the maximum column values width.
      unicode: When true use unicode box drawing characters to draw tables.

    """
    ...

def render_csv(columns, rows, dcontext, file, expand=..., nullvalue=..., **kwargs): # -> None:
    """Render the result of executing a query in text format.

    Args:
      columns: A list of beanquery.Column describing the table columns.
      rows: Data to render.
      dcontext: A DisplayContext object prepared for rendering numbers.
      file: A file object to render the results to.
      expand: A boolean, if true, expand columns that render to lists on multiple rows.
      nullvalue: String to use to represent NULL values.
    """
    ...

