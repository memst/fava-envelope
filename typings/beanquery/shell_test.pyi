"""
This type stub file was generated by pyright.
"""

import functools
import unittest
from beancount.utils import test_utils

__copyright__ = ...
__license__ = ...
@functools.lru_cache(None)
def load(): # -> tuple[Any, Any, Any]:
    ...

def run_shell_command(cmd): # -> tuple[Any, Any]:
    """Run a shell command and return its output."""
    ...

def runshell(function): # -> Callable[..., Any]:
    """Decorate a function to run the shell and return the output."""
    ...

class TestUseCases(unittest.TestCase):
    """Testing all the use cases from the proposal here.
    I'm hoping to replace reports by these queries instead."""
    @runshell
    def test_print_from(self, out, err): # -> None:
        """
        PRINT FROM narration ~ 'alone'
        """
        ...
    
    @runshell
    def test_accounts(self, out, err): # -> None:
        """
        SELECT DISTINCT account, open_date(account)
        ORDER BY account_sortkey(account);
        """
        ...
    
    @runshell
    def test_commodities(self, out, err): # -> None:
        """
        SELECT DISTINCT currency ORDER BY 1;
        """
        ...
    
    @runshell
    def test_commodities_cost(self, out, err): # -> None:
        """
        SELECT DISTINCT cost_currency ORDER BY 1;
        """
        ...
    
    @runshell
    def test_commodities_pairs(self, out, err): # -> None:
        """
        SELECT DISTINCT currency, cost_currency ORDER BY 1, 2;
        """
        ...
    
    @runshell
    def test_balances(self, out, err): # -> None:
        """
        BALANCES AT cost;
        """
        ...
    
    @runshell
    def test_balances_with_where(self, out, err): # -> None:
        """
        JOURNAL 'Assets:Checking';
        """
        ...
    
    @runshell
    def test_balance_sheet(self, out, err): # -> None:
        """
        BALANCES AT cost
        FROM OPEN ON 2022-01-02 CLOSE ON 2022-02-01 CLEAR;
        """
        ...
    
    @runshell
    def test_income_statement(self, out, err): # -> None:
        """
        SELECT account, cost(sum(position))
        FROM OPEN ON 2022-01-01 CLOSE ON 2023-01-01
        WHERE account ~ '(Income|Expenses):*'
        GROUP BY account, account_sortkey(account)
        ORDER BY account_sortkey(account);
        """
        ...
    
    @runshell
    def test_journal(self, out, err): # -> None:
        """
        JOURNAL 'Assets:Checking'
        FROM OPEN ON 2022-02-01 CLOSE ON 2022-03-01;
        """
        ...
    
    @runshell
    def test_conversions(self, out, err): # -> None:
        """
        SELECT date, payee, narration, position, balance
        FROM OPEN ON 2022-01-01 CLOSE ON 2023-01-01
        WHERE flag = 'C'
        """
        ...
    
    @runshell
    def test_documents(self, out, err): # -> None:
        """
        SELECT date, account, narration
        WHERE type = 'Document';
        """
        ...
    
    @runshell
    def test_holdings(self, out, err): # -> None:
        """
        SELECT account, currency, cost_currency, sum(position)
        GROUP BY account, currency, cost_currency;
        """
        ...
    


class TestRun(unittest.TestCase):
    @runshell
    def test_run_custom__list(self, out, err): # -> None:
        """
        .run
        """
        ...
    
    @runshell
    def test_run_custom__query_not_exists(self, out, err): # -> None:
        """
        .run something
        """
        ...
    
    @runshell
    def test_run_custom__query_id(self, out, err): # -> None:
        """
        .run taxes
        """
        ...
    
    @runshell
    def test_run_custom__query_string(self, out, err): # -> None:
        """
        RUN "taxes"
        """
        ...
    
    @runshell
    def test_run_custom__all(self, out, err): # -> None:
        """
        RUN *
        """
        ...
    


class TestHelp(unittest.TestCase):
    def test_help_functions(self): # -> None:
        ...
    


class ClickTestCase(unittest.TestCase):
    """Base class for command-line program test cases."""
    def main(self, *args): # -> Result:
        ...
    


class TestShell(ClickTestCase):
    @test_utils.docfile
    def test_success(self, filename): # -> None:
        """
        2013-01-01 open Assets:Account1
        2013-01-01 open Assets:Account2
        2013-01-01 open Assets:Account3
        2013-01-01 open Equity:Unknown

        2013-04-05 *
          Equity:Unknown
          Assets:Account1     5000 USD

        2013-04-05 *
          Assets:Account1     -3000 USD
          Assets:Account2        30 BOOG {100 USD}

        2013-04-05 *
          Assets:Account1     -1000 USD
          Assets:Account3       800 EUR @ 1.25 USD
        """
        ...
    
    @test_utils.docfile
    def test_format_csv(self, filename): # -> None:
        """
        """
        ...
    
    @test_utils.docfile
    def test_format_text(self, filename): # -> None:
        """
        """
        ...
    


if __name__ == '__main__':
    ...
