"""
This type stub file was generated by pyright.
"""

import unittest

__copyright__ = ...
__license__ = ...
class Table:
    def __init__(self, name) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class TestCompileExpression(unittest.TestCase):
    @classmethod
    def setUpClass(cls): # -> None:
        ...
    
    def compile(self, expr): # -> None:
        ...
    
    def test_expr_invalid(self): # -> None:
        ...
    
    def test_expr_column(self): # -> None:
        ...
    
    def test_expr_function(self): # -> None:
        ...
    
    def test_expr_unaryop(self): # -> None:
        ...
    
    def test_expr_binaryop(self): # -> None:
        ...
    
    def test_expr_constant(self): # -> None:
        ...
    
    def test_expr_function_arity(self): # -> None:
        ...
    
    def test_constants_folding(self): # -> None:
        ...
    


class TestCompileAggregateChecks(unittest.TestCase):
    def test_is_aggregate_derived(self): # -> None:
        ...
    
    def test_get_columns_and_aggregates(self): # -> None:
        ...
    


class CompileSelectBase(unittest.TestCase):
    maxDiff = ...
    def setUp(self): # -> None:
        ...
    
    def compile(self, query):
        """Parse one query and compile it.

        Args:
          query: An SQL query to be parsed.
        Returns:
          The AST.
        """
        ...
    
    def assertSelectInvariants(self, query): # -> None:
        """Assert the invariants on the query.

        Args:
          query: An instance of EvalQuery, a compiled query statement.
        Raises:
          AssertionError: if the check fails.
        """
        ...
    
    def assertIndexes(self, query, expected_simple_indexes, expected_aggregate_indexes, expected_group_indexes, expected_order_spec): # -> None:
        """Check the four lists of indexes for comparison.

        Args:
          query: An instance of EvalQuery, a compiled query statement.
          expected_simple_indexes: The expected visible non-aggregate indexes.
          expected_aggregate_indexes: The expected visible aggregate indexes.
          expected_group_indexes: The expected group_indexes.
          expected_order_spec: The expected order_spec.
        Raises:
          AssertionError: if the check fails.
        """
        ...
    
    def assertCompile(self, expected, query, debug=...):
        """Assert parsed and compiled contents from 'query' is 'expected'.

        Args:
          expected: An expected AST to compare against the parsed value.
          query: An SQL query to be parsed.
          debug: A boolean, if true, print extra debugging information on the console.
        Raises:
          AssertionError: If the actual AST does not match the expected one.
        """
        ...
    


class TestCompileFundamentals(CompileSelectBase):
    def test_operaotors(self):
        ...
    
    def test_coalesce(self):
        ...
    


class TestCompileSelect(CompileSelectBase):
    def test_compile_from(self):
        ...
    
    def test_compile_from_invalid_dates(self):
        ...
    
    def test_compile_targets_wildcard(self):
        ...
    
    def test_compile_targets_named(self):
        ...
    
    def test_compile_mixed_aggregates(self): # -> None:
        ...
    
    def test_compile_aggregates_of_aggregates(self): # -> None:
        ...
    
    def test_compile_having_non_aggregate(self): # -> None:
        ...
    
    def test_compile_group_by_inventory(self): # -> None:
        ...
    


class TestCompileSelectGroupBy(CompileSelectBase):
    def test_compile_group_by_non_aggregates(self):
        ...
    
    def test_compile_group_by_reference_by_name(self):
        ...
    
    def test_compile_group_by_reference_by_number(self):
        ...
    
    def test_compile_group_by_reference_an_aggregate(self): # -> None:
        ...
    
    def test_compile_group_by_implicit(self):
        ...
    
    def test_compile_group_by_coverage(self):
        ...
    
    def test_compile_group_by_reconcile(self):
        ...
    


class TestCompileSelectOrderBy(CompileSelectBase):
    def test_compile_order_by_simple(self):
        ...
    
    def test_compile_order_by_simple_2(self):
        ...
    
    def test_compile_order_by_create_non_agg(self):
        ...
    
    def test_compile_order_by_reconcile(self):
        ...
    
    def test_compile_order_by_reference_invisible(self):
        ...
    
    def test_compile_order_by_aggregate(self):
        ...
    


class TestTranslationJournal(CompileSelectBase):
    maxDiff = ...
    def test_journal(self): # -> None:
        ...
    
    def test_journal_with_account(self): # -> None:
        ...
    
    def test_journal_with_account_and_from(self): # -> None:
        ...
    
    def test_journal_with_account_func_and_from(self): # -> None:
        ...
    


class TestTranslationBalance(CompileSelectBase):
    group_by = ...
    order_by = ...
    def test_balance(self): # -> None:
        ...
    
    def test_balance_with_units(self): # -> None:
        ...
    
    def test_balance_with_units_and_from(self): # -> None:
        ...
    
    def test_print(self):
        ...
    
    def test_print_from(self):
        ...
    


class TestCompileParameters(unittest.TestCase):
    @classmethod
    def setUpClass(cls): # -> None:
        ...
    
    def compile(self, query, params): # -> None:
        ...
    
    def test_named_parameters(self): # -> None:
        ...
    
    def test_positional_parameters(self): # -> None:
        ...
    
    def test_mixing_parameters(self): # -> None:
        ...
    
    def test_missing_parameters_positional(self): # -> None:
        ...
    
    def test_missing_parameters_named(self): # -> None:
        ...
    


