"""
This type stub file was generated by pyright.
"""

import dataclasses
import datetime
import enum
import sys
import typing
from typing import Any, Optional, Union

if typing.TYPE_CHECKING:
    ...
def tosexp(node): # -> str:
    ...

def walk(node): # -> Generator[Any | Node, Any, None]:
    ...

class Node:
    """Base class for BQL AST nodes."""
    __slots__ = ...
    parseinfo = ...
    @property
    def text(self): # -> None:
        ...
    
    def tosexp(self): # -> str:
        ...
    
    def walk(self): # -> Generator[Any | Node, Any, None]:
        ...
    


def node(name, fields): # -> type:
    """Manufacture an AST node class."""
    ...

Select = ...
Balances = ...
Journal = ...
Print = ...
Target = ...
Asterisk = ...
@dataclasses.dataclass(**{ 'slots': True } if sys.version_info[: 2] >= (3, 10) else {})
class From(Node):
    expression: Optional[Node] = ...
    open: Optional[datetime.date] = ...
    close: Optional[Union[datetime.date, bool]] = ...
    clear: Optional[bool] = ...
    parseinfo: Any = ...


GroupBy = ...
OrderBy = ...
class Ordering(enum.IntEnum):
    ASC = ...
    DESC = ...
    def __repr__(self): # -> str:
        ...
    


PivotBy = ...
Table = ...
Column = ...
Function = ...
Attribute = ...
Subscript = ...
Constant = ...
Placeholder = ...
UnaryOp = ...
BinaryOp = ...
BoolOp = ...
Between = ...
class Not(UnaryOp):
    __slots__ = ...


class IsNull(UnaryOp):
    __slots__ = ...


class IsNotNull(UnaryOp):
    __slots__ = ...


class And(BoolOp):
    __slots__ = ...


class Or(BoolOp):
    __slots__ = ...


class Equal(BinaryOp):
    __slots__ = ...


class NotEqual(BinaryOp):
    __slots__ = ...


class Greater(BinaryOp):
    __slots__ = ...


class GreaterEq(BinaryOp):
    __slots__ = ...


class Less(BinaryOp):
    __slots__ = ...


class LessEq(BinaryOp):
    __slots__ = ...


class Match(BinaryOp):
    __slots__ = ...


class NotMatch(BinaryOp):
    __slots__ = ...


class In(BinaryOp):
    __slots__ = ...


class NotIn(BinaryOp):
    __slots__ = ...


class Neg(UnaryOp):
    __slots__ = ...


class Mul(BinaryOp):
    __slots__ = ...


class Div(BinaryOp):
    __slots__ = ...


class Mod(BinaryOp):
    __slots__ = ...


class Add(BinaryOp):
    __slots__ = ...


class Sub(BinaryOp):
    __slots__ = ...


