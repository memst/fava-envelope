"""
This type stub file was generated by pyright.
"""

import enum

"""A settings class to offer control over the number of digits rendered.

This module contains routines that can accumulate information on the width and
precision of numbers to be rendered and derive the precision required to render
all of them consistently and under certain common alignment requirements. This
is required in order to output neatly lined up columns of numbers in various
styles.

A common case is that the precision can be observed for numbers present in the
input file. This display precision can be used as the "precision by default" if
we write a routine for which it is inconvenient to feed all the numbers to build
such an accumulator.

Here are all the aspects supported by this module:

  PRECISION: Numbers for a particular currency are always rendered to the same
  precision, and they can be rendered to one of two precisions; either

  1. the most common number of fractional digits, or
  2. the maximum number of digits seen (this is useful for rendering prices).

  ALIGNMENT: Several alignment methods are supported.

  * "natural": Render the strings as small as possible with no padding, but to
    their currency's precision. Like this:

      '1.2345'
      '764'
      '-7,409.01'
      '0.00000125'

  * "dot-aligned": The periods will align vertically, the left and right sides
    are padded so that the column of numbers has the same width:

      '     1.2345    '
      '   764         '
      '-7,409.01      '
      '     0.00000125'

  * "right": The strings are all flushed right, the left side is padded so that
    the column of numbers has the same width:

      '     1.2345'
      '        764'
      '  -7,409.01'
      ' 0.00000125'

  SIGN: If a negative sign is present in the input numbers, the rendered numbers
  reserve a space for it. If not, then we save the space.

  COMMAS: If the user requests to render commas, commas are rendered in the
  output.

  RESERVED: A number of extra integral digits reserved on the left in order to
  allow rendering novel numbers that haven't yet been seen. For example,
  balances may contains much larger numbers than the numbers seen in input
  files, and these need to be accommodated when aligning to the right.

"""
__copyright__ = ...
__license__ = ...
class Precision(enum.Enum):
    """The type of precision required."""
    MOST_COMMON = ...
    MAXIMUM = ...


class Align(enum.Enum):
    """Alignment style for numbers."""
    NATURAL = ...
    DOT = ...
    RIGHT = ...


class _CurrencyContext:
    """A container of information for a single currency.

    This object accumulates aggregate information about numbers that is then
    used by the DisplayContext to manufacture appropriate Formatter
    objects.

    Attributes:
      has_sign: A boolean, true if at least one of the numbers has a negative or
        explicit positive sign.
      integer_max: The maximum number of digits for the integer part.
      fractional_dist: A frequency distribution of fractionals seen in the input file.

    """
    def __init__(self) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def update(self, number): # -> None:
        ...
    
    def update_from(self, other): # -> None:
        ...
    
    def get_fractional(self, precision): # -> Literal[0] | None:
        """
        Returns:
          An integer for the number of fractional digits, or None.
        """
        ...
    


class DisplayContext:
    """A builder object used to construct a DisplayContext from a series of numbers.

    Attributes:
      ccontexts: A dict of currency string to CurrencyContext instance.
      commas: A bool, true if we should render commas. This just gets propagated
        onwards as the default value of to build with.
    """
    def __init__(self) -> None:
        ...
    
    def set_commas(self, commas): # -> None:
        """Set the default value for rendering commas."""
        ...
    
    def __str__(self) -> str:
        ...
    
    def update(self, number, currency=...): # -> None:
        """Update the builder with the given number for the given currency.

        Args:
          number: An instance of Decimal to consider for this currency.
          currency: An optional string, the currency this numbers applies to.
        """
        ...
    
    def update_from(self, other): # -> None:
        """Update the builder with the other given DisplayContext.

        Args:
          other: Another DisplayContext.
        """
        ...
    
    def quantize(self, number, currency, precision=...): # -> Decimal:
        """Quantize the given number to the given precision.

        Args:
          number: A Decimal instance, the number to be quantized.
          currency: A currency string.
          precision: Which precision to use.
        Returns:
          A Decimal instance, the quantized number.
        """
        ...
    
    def build(self, alignment=..., precision=..., commas=..., reserved=...): # -> DisplayFormatter:
        """Build a formatter for the given display context.

        Args:
          alignment: The desired alignment.
          precision: The desired precision.
          commas: Whether to render commas or not. If 'None', the default value carried
            by the context will be used.
          reserved: An integer, the number of extra digits to be allocated in
            the maximum width calculations.
        """
        ...
    
    DEFAULT_UNINITIALIZED_PRECISION = ...


class DisplayFormatter:
    """A class used to contain various settings that control how we output numbers.
    In particular, the precision used for each currency, and whether or not
    commas should be printed. This object is intended to be passed around to all
    functions that format numbers to strings.

    Attributes:
      dcontext: A DisplayContext instance.
      precision: An enum of Precision from which it was built.
      fmtstrings: A dict of currency to pre-baked format strings for it.
      fmtfuncs: A dict of currency to pre-baked formatting functions for it.
    """
    def __init__(self, dcontext, precision, fmtstrings) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def format(self, number, currency=...):
        ...
    
    def quantize(self, number, currency=...):
        ...
    
    __call__ = ...


DEFAULT_DISPLAY_CONTEXT = ...
DEFAULT_FORMATTER = ...
