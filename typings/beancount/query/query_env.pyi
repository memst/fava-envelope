"""
This type stub file was generated by pyright.
"""

from beancount.query import query_compile

"""Environment object for compiler.

This module contains the various column accessors and function evaluators that
are made available by the query compiler via their compilation context objects.
Define new columns and functions here.
"""
__copyright__ = ...
__license__ = ...
class _Neg(query_compile.EvalFunction):
    "Compute the negative value of the argument. This works on various types."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class NegDecimal(_Neg):
    __intypes__ = ...


class NegAmount(_Neg):
    __intypes__ = ...


class NegPosition(_Neg):
    __intypes__ = ...


class NegInventory(_Neg):
    __intypes__ = ...


class AbsDecimal(query_compile.EvalFunction):
    "Compute the length of the argument. This works on sequences."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class AbsPosition(query_compile.EvalFunction):
    "Compute the length of the argument. This works on sequences."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class AbsInventory(query_compile.EvalFunction):
    "Compute the length of the argument. This works on sequences."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class SafeDiv(query_compile.EvalFunction):
    "A division operation that swallows dbz exceptions and outputs 0 instead."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Decimal:
        ...
    


class SafeDivInt(SafeDiv):
    __intypes__ = ...


class Length(query_compile.EvalFunction):
    "Compute the length of the argument. This works on sequences."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> int:
        ...
    


class Str(query_compile.EvalFunction):
    "Convert the argument to a string."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class MaxWidth(query_compile.EvalFunction):
    "Convert the argument to a substring. This can be used to ensure maximum width"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class Year(query_compile.EvalFunction):
    "Extract the year from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Month(query_compile.EvalFunction):
    "Extract the month from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class YearMonth(query_compile.EvalFunction):
    "Extract the year and month from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> date:
        ...
    


class Quarter(query_compile.EvalFunction):
    "Extract the quarter from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class Day(query_compile.EvalFunction):
    "Extract the day from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Weekday(query_compile.EvalFunction):
    "Extract a 3-letter weekday from a date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Today(query_compile.EvalFunction):
    "Today's date"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> date:
        ...
    


class Root(query_compile.EvalFunction):
    "Get the root name(s) of the account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class Parent(query_compile.EvalFunction):
    "Get the parent name of the account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str | None:
        ...
    


class Leaf(query_compile.EvalFunction):
    "Get the name of the leaf subaccount."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str | None:
        ...
    


class Grep(query_compile.EvalFunction):
    "Match a group against a string and return only the matched portion."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class GrepN(query_compile.EvalFunction):
    "Match a pattern with subgroups against a string and return the subgroup at the index"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class Subst(query_compile.EvalFunction):
    "Substitute leftmost non-overlapping occurrences of pattern by replacement."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class Upper(query_compile.EvalFunction):
    "Convert string to uppercase"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class Lower(query_compile.EvalFunction):
    "Convert string to lowercase"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class OpenDate(query_compile.EvalFunction):
    "Get the date of the open directive of the account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class CloseDate(query_compile.EvalFunction):
    "Get the date of the close directive of the account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class Meta(query_compile.EvalFunction):
    "Get some metadata key of the Posting."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class EntryMeta(query_compile.EvalFunction):
    "Get some metadata key of the parent directive (Transaction)."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class AnyMeta(query_compile.EvalFunction):
    "Get metadata from the posting or its parent transaction's metadata if not present."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class OpenMeta(query_compile.EvalFunction):
    "Get the metadata dict of the open directive of the account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class AccountSortKey(query_compile.EvalFunction):
    "Get a string to sort accounts in order taking into account the types."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class CurrencyMeta(query_compile.EvalFunction):
    "Get the metadata dict of the commodity directive of the currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> dict[Any, Any]:
        ...
    


class UnitsPosition(query_compile.EvalFunction):
    "Get the number of units of a position (stripping cost)."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class UnitsInventory(query_compile.EvalFunction):
    "Get the number of units of an inventory (stripping cost)."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class CostPosition(query_compile.EvalFunction):
    "Get the cost of a position."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class CostInventory(query_compile.EvalFunction):
    "Get the cost of an inventory."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class ConvertAmount(query_compile.EvalFunction):
    "Coerce an amount to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ConvertAmountWithDate(query_compile.EvalFunction):
    "Coerce an amount to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ConvertPosition(query_compile.EvalFunction):
    "Coerce an amount to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ConvertPositionWithDate(query_compile.EvalFunction):
    "Coerce an amount to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ValuePosition(query_compile.EvalFunction):
    "Convert a position to its cost currency at the market value."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ValuePositionWithDate(query_compile.EvalFunction):
    "Convert a position to its cost currency at the market value of a particular date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class ConvertInventory(query_compile.EvalFunction):
    "Coerce an inventory to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class ConvertInventoryWithDate(query_compile.EvalFunction):
    "Coerce an inventory to a particular currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class ValueInventory(query_compile.EvalFunction):
    "Coerce an inventory to its market value at the current date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class ValueInventoryWithDate(query_compile.EvalFunction):
    "Coerce an inventory to its market value at a particular date."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Price(query_compile.EvalFunction):
    "Fetch a price for something at a particular date"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Decimal | None:
        ...
    


class PriceWithDate(query_compile.EvalFunction):
    "Fetch a price for something at a particular date"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Decimal | None:
        ...
    


class Number(query_compile.EvalFunction):
    "Extract the number from an Amount."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Currency(query_compile.EvalFunction):
    "Extract the currency from an Amount."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class GetItemStr(query_compile.EvalFunction):
    "Get the string value of a dict. The value is always converted to a string."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class FindFirst(query_compile.EvalFunction):
    "Filter a string sequence by regular expression and return the first match."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class JoinStr(query_compile.EvalFunction):
    "Join a sequence of strings to a single comma-separated string."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class OnlyInventory(query_compile.EvalFunction):
    "Get one currency's amount from the inventory."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class FilterCurrencyPosition(query_compile.EvalFunction):
    "Filter an inventory to just the specified currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class FilterCurrencyInventory(query_compile.EvalFunction):
    "Filter an inventory to just the specified currency."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> Inventory:
        ...
    


class PosSignDecimal(query_compile.EvalFunction):
    "Correct sign of an Amount based on the usual balance of associated account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class PosSignAmount(query_compile.EvalFunction):
    "Correct sign of an Amount based on the usual balance of associated account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class PosSignPosition(query_compile.EvalFunction):
    "Correct sign of an Amount based on the usual balance of associated account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class PosSignInventory(query_compile.EvalFunction):
    "Correct sign of an Amount based on the usual balance of associated account."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Coalesce(query_compile.EvalFunction):
    "Return the first non-null argument"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class Date(query_compile.EvalFunction):
    "Construct a date with year, month, day arguments"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> date:
        ...
    


class ParseDate(query_compile.EvalFunction):
    "Construct a date with year, month, day arguments"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> _Date:
        ...
    


class DateDiff(query_compile.EvalFunction):
    "Calculates the difference (in days) between two dates"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class DateAdd(query_compile.EvalFunction):
    "Adds/subtracts number of days from the given date"
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


SIMPLE_FUNCTIONS = ...
class Count(query_compile.EvalAggregator):
    "Count the number of occurrences of the argument."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, unused_ontext): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Sum(query_compile.EvalAggregator):
    "Calculate the sum of the numerical argument."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, context): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class SumBase(query_compile.EvalAggregator):
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class SumAmount(SumBase):
    "Calculate the sum of the amount. The result is an Inventory."
    __intypes__ = ...
    def update(self, store, context): # -> None:
        ...
    


class SumPosition(SumBase):
    "Calculate the sum of the position. The result is an Inventory."
    __intypes__ = ...
    def update(self, store, context): # -> None:
        ...
    


class SumInventory(SumBase):
    "Calculate the sum of the inventories. The result is an Inventory."
    __intypes__ = ...
    def update(self, store, context): # -> None:
        ...
    


class First(query_compile.EvalAggregator):
    "Keep the first of the values seen."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, context): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Last(query_compile.EvalAggregator):
    "Keep the last of the values seen."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, context): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Min(query_compile.EvalAggregator):
    "Compute the minimum of the values."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, context): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


class Max(query_compile.EvalAggregator):
    "Compute the maximum of the values."
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def allocate(self, allocator): # -> None:
        ...
    
    def initialize(self, store): # -> None:
        ...
    
    def update(self, store, context): # -> None:
        ...
    
    def __call__(self, context):
        ...
    


AGGREGATOR_FUNCTIONS = ...
class IdEntryColumn(query_compile.EvalColumn):
    "Unique id of a directive."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class TypeEntryColumn(query_compile.EvalColumn):
    "The data type of the directive."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class FilenameEntryColumn(query_compile.EvalColumn):
    "The filename where the directive was parsed from or created."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class LineNoEntryColumn(query_compile.EvalColumn):
    "The line number from the file the directive was parsed from."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class DateEntryColumn(query_compile.EvalColumn):
    "The date of the directive."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class YearEntryColumn(query_compile.EvalColumn):
    "The year of the date of the directive."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class MonthEntryColumn(query_compile.EvalColumn):
    "The month of the date of the directive."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class DayEntryColumn(query_compile.EvalColumn):
    "The day of the date of the directive."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class FlagEntryColumn(query_compile.EvalColumn):
    "The flag the transaction."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class PayeeEntryColumn(query_compile.EvalColumn):
    "The payee of the transaction."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Literal[''] | None:
        ...
    


class NarrationEntryColumn(query_compile.EvalColumn):
    "The narration of the transaction."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Literal[''] | None:
        ...
    


class DescriptionEntryColumn(query_compile.EvalColumn):
    "A combination of the payee + narration of the transaction, if present."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> LiteralString | None:
        ...
    


EMPTY_SET = ...
class TagsEntryColumn(query_compile.EvalColumn):
    "The set of tags of the transaction."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> frozenset[Any]:
        ...
    


class LinksEntryColumn(query_compile.EvalColumn):
    "The set of links of the transaction."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> frozenset[Any]:
        ...
    


class MatchAccount(query_compile.EvalFunction):
    """A predicate, true if the transaction has at least one posting matching
    the regular expression argument."""
    __intypes__ = ...
    def __init__(self, operands) -> None:
        ...
    
    def __call__(self, context): # -> bool:
        ...
    


ENTRY_FUNCTIONS = ...
class FilterEntriesEnvironment(query_compile.CompilationEnvironment):
    """An execution context that provides access to attributes on Transactions
    and other entry types.
    """
    context_name = ...
    columns = ...
    functions = ...


class IdColumn(query_compile.EvalColumn):
    "The unique id of the parent transaction for this posting."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class TypeColumn(query_compile.EvalColumn):
    "The data type of the parent transaction for this posting."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class FilenameColumn(query_compile.EvalColumn):
    "The filename where the posting was parsed from or created."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class LineNoColumn(query_compile.EvalColumn):
    "The line number from the file the posting was parsed from."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class FileLocationColumn(query_compile.EvalColumn):
    """The filename:lineno where the posting was parsed from or created.

    If you select this column as the first column, because it renders like
    errors, Emacs is able to pick those up and you can navigate between an
    arbitrary list of transactions with next-error and previous-error.
    """
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> str:
        ...
    


class DateColumn(query_compile.EvalColumn):
    "The date of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class YearColumn(query_compile.EvalColumn):
    "The year of the date of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class MonthColumn(query_compile.EvalColumn):
    "The month of the date of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class DayColumn(query_compile.EvalColumn):
    "The day of the date of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class FlagColumn(query_compile.EvalColumn):
    "The flag of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class PayeeColumn(query_compile.EvalColumn):
    "The payee of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Literal['']:
        ...
    


class NarrationColumn(query_compile.EvalColumn):
    "The narration of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class DescriptionColumn(query_compile.EvalColumn):
    "A combination of the payee + narration for the transaction of this posting."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> LiteralString | None:
        ...
    


class TagsColumn(query_compile.EvalColumn):
    "The set of tags of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> frozenset[Any]:
        ...
    


class LinksColumn(query_compile.EvalColumn):
    "The set of links of the parent transaction for this posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> frozenset[Any]:
        ...
    


class PostingFlagColumn(query_compile.EvalColumn):
    "The flag of the posting itself."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class AccountColumn(query_compile.EvalColumn):
    "The account of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class OtherAccountsColumn(query_compile.EvalColumn):
    "The list of other accounts in the transaction, excluding that of this posting."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> list[Any]:
        ...
    


class NumberColumn(query_compile.EvalColumn):
    "The number of units of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class CurrencyColumn(query_compile.EvalColumn):
    "The currency of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class CostNumberColumn(query_compile.EvalColumn):
    "The number of cost units of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class CostCurrencyColumn(query_compile.EvalColumn):
    "The cost currency of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Literal['']:
        ...
    


class CostDateColumn(query_compile.EvalColumn):
    "The cost currency of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> None:
        ...
    


class CostLabelColumn(query_compile.EvalColumn):
    "The cost currency of the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Literal['']:
        ...
    


class PositionColumn(query_compile.EvalColumn):
    "The position for the posting. These can be summed into inventories."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Position:
        ...
    


class PriceColumn(query_compile.EvalColumn):
    "The price attached to the posting."
    __equivalent__ = ...
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class WeightColumn(query_compile.EvalColumn):
    "The computed weight used for this posting."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context): # -> Amount:
        ...
    


class BalanceColumn(query_compile.EvalColumn):
    "The balance for the posting. These can be summed into inventories."
    __intypes__ = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, context):
        ...
    


class FilterPostingsEnvironment(query_compile.CompilationEnvironment):
    """An execution context that provides access to attributes on Postings.
    """
    context_name = ...
    columns = ...
    functions = ...


class TargetsEnvironment(FilterPostingsEnvironment):
    """An execution context that provides access to attributes on Postings.
    """
    context_name = ...
    functions = ...
    wildcard_columns = ...


