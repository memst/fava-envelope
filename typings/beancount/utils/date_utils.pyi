"""
This type stub file was generated by pyright.
"""

import contextlib

"""Parse the date from various formats.
"""
__copyright__ = ...
__license__ = ...
def iter_dates(start_date, end_date): # -> Generator[Any, Any, None]:
    """Yield all the dates between 'start_date' and 'end_date'.

    Args:
      start_date: An instance of datetime.date.
      end_date: An instance of datetime.date.
    Yields:
      Instances of datetime.date.
    """
    ...

def parse_date_liberally(string, parse_kwargs_dict=...): # -> _Date:
    """Parse arbitrary strings to dates.

    This function is intended to support liberal inputs, so that we can use it
    in accepting user-specified dates on command-line scripts.

    Args:
      string: A string to parse.
      parse_kwargs_dict: Dict of kwargs to pass to dateutil parser.
    Returns:
      A datetime.date object.
    """
    ...

def render_ofx_date(dtime): # -> str:
    """Render a datetime to the OFX format.

    Args:
      dtime: A datetime.datetime instance.
    Returns:
      A string, rendered to milliseconds.
    """
    ...

def next_month(date): # -> date:
    """Compute the date at the beginning of the following month from the given date.

    Args:
      date: A datetime.date instance.
    Returns:
      A datetime.date instance, the first day of the month following 'date'.
    """
    ...

@contextlib.contextmanager
def intimezone(tz_value: str): # -> Generator[None, Any, None]:
    """Temporarily reset the value of TZ.

    This is used for testing.

    Args:
      tz_value: The value of TZ to set for the duration of this context.
    Returns:
      A contextmanager in the given timezone locale.
    """
    ...

