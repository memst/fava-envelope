"""
This type stub file was generated by pyright.
"""

"""Functions to register auxiliary functions on a class' methods to check for invariants.

This is intended to be used in a test, whereby your test will setup a class to
automatically run invariant verification functions before and after each
function call, to ensure some extra sanity checks that wouldn't be used in
non-tests.

Example: Instrument the Inventory class with the check_inventory_invariants()
function.

  def setUp(module):
      instrument_invariants(Inventory,
                            check_inventory_invariants,
                            check_inventory_invariants)

  def tearDown(module):
      uninstrument_invariants(Inventory)

"""
__copyright__ = ...
__license__ = ...
def invariant_check(method, prefun, postfun): # -> Callable[..., Any]:
    """Decorate a method with the pre/post invariant checkers.

    Args:
      method: An unbound method to instrument.
      prefun: A function that checks invariants pre-call.
      postfun: A function that checks invariants post-call.
    Returns:
      An unbound method, decorated.
    """
    ...

def instrument_invariants(klass, prefun, postfun): # -> None:
    """Instrument the class 'klass' with pre/post invariant
    checker functions.

    Args:
      klass: A class object, whose methods to be instrumented.
      prefun: A function that checks invariants pre-call.
      postfun: A function that checks invariants pre-call.
    """
    ...

def uninstrument_invariants(klass): # -> None:
    """Undo the instrumentation for invariants.

    Args:
      klass: A class object, whose methods to be uninstrumented.
    """
    ...

