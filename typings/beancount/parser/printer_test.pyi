"""
This type stub file was generated by pyright.
"""

import unittest
from beancount.parser import cmptest
from beancount.utils import test_utils
from beancount import loader

__copyright__ = ...
__license__ = ...
META = ...
class TestPrinter(unittest.TestCase):
    def test_methods_coverage(self): # -> None:
        ...
    
    def test_render_source(self): # -> None:
        ...
    
    def test_format_and_print_error(self): # -> None:
        ...
    


class TestEntryPrinter(cmptest.TestCase):
    def assertRoundTrip(self, entries1, errors1): # -> None:
        ...
    
    @loader.load_doc()
    def test_Transaction(self, entries, errors, __): # -> None:
        """
        2014-01-01 open Assets:Account1
        2014-01-01 open Assets:Account2
        2014-01-01 open Assets:Account3
        2014-01-01 open Assets:Account4
        2014-01-01 open Assets:Cash

        2014-06-08 *
          Assets:Account1       111.00 BEAN
          Assets:Cash          -111.00 BEAN

        2014-06-08 * "Narration"
          Assets:Account1       111.00 BEAN
          Assets:Cash          -111.00 BEAN

        2014-06-08 * "Payee" "Narration"
          Assets:Account1       111.00 BEAN
          Assets:Cash          -111.00 BEAN

        2014-06-08 * "Payee" "Narration" ^link1 ^link2 #tag1 #tag2
          Assets:Account1       111.00 BEAN
          Assets:Cash          -111.00 BEAN

        2014-06-08 * "Narration"
          Assets:Account1       111.00 BEAN {53.24 USD}
          Assets:Cash         -5909.64 USD

        2014-06-08 !
          Assets:Account1       111.00 BEAN {53.24 USD} @ 55.02 USD
          Assets:Account2       111.00 BEAN {53.24 USD}
          Assets:Account3       111.00 BEAN @ 55.02 USD
          Assets:Account4       111.00 BEAN
          Assets:Cash          -111.00 BEAN
          Assets:Cash         -17926.5 USD

        2014-06-08 *
          Assets:Account1         111.00 BEAN
          ! Assets:Account2       111.00 BEAN
          * Assets:Account3       111.00 BEAN
          ? Assets:Account4      -333.00 BEAN

        2014-06-09 * "An entry like a conversion entry"
          Assets:Account1         1 USD @ 0 OTHER
          Assets:Account2         1 CAD @ 0 OTHER

        2014-06-10 * "Entry with escaped \\"symbols\\" \\ \\r \\n"
          Assets:Account1       111.00 BEAN
          Assets:Cash          -111.00 BEAN

        2014-06-20 custom "budget" Assets:Account2 "balance < 200.00 USD" 200.00 10.00 USD
        """
        ...
    
    @loader.load_doc()
    def test_Balance(self, entries, errors, __): # -> None:
        """
        2014-06-01 open Assets:Account1
        2014-06-08 balance Assets:Account1     0.00 USD
        """
        ...
    
    @loader.load_doc()
    def test_BalanceTolerance(self, entries, errors, __): # -> None:
        """
        2014-06-01 open Assets:Account1
        2014-06-01 open Assets:Cash

        2014-06-02 * "Deposit"
          Assets:Account1       199.95 USD
          Assets:Cash          -199.95 USD

        2014-06-04 balance Assets:Account1     200.00 ~0.05 USD
        """
        ...
    
    @loader.load_doc()
    def test_Note(self, entries, errors, __): # -> None:
        """
        2014-06-01 open Assets:Account1
        2014-06-08 note Assets:Account1 "Note"
        """
        ...
    
    @loader.load_doc()
    def test_Document(self, entries, errors, __): # -> None:
        """
        option "plugin_processing_mode" "raw"
        2014-06-01 open Assets:Account1
        2014-06-08 document Assets:Account1 "/path/to/document.pdf"
        2014-06-08 document Assets:Account1 "path/to/document.csv"
        2014-06-08 document Assets:Account1 "path/to/document2.csv" #tag1 #tag2 ^link1 ^link2
        2014-06-08 document Assets:Account1 "path/to/document2.csv" #tag1
        2014-06-08 document Assets:Account1 "path/to/document2.csv" ^link1
        """
        ...
    
    @loader.load_doc()
    def test_Query(self, entries, errors, __): # -> None:
        """
        2014-06-08 query "cash" "SELECT sum(position) WHERE currency = 'USD'"
        """
        ...
    
    @loader.load_doc()
    def test_Pad(self, entries, errors, __): # -> None:
        """
        2014-01-01 open Assets:Account1
        2014-01-01 open Assets:Account2
        2014-06-08 pad Assets:Account1 Assets:Account2
        2014-10-01 balance Assets:Account1  1 USD
        """
        ...
    
    @loader.load_doc()
    def test_Open(self, entries, errors, __): # -> None:
        """
        2014-06-08 open Assets:Account1
        2014-06-08 open Assets:Account2  USD
        2014-06-08 open Assets:Account3  USD,CAD,EUR
        2014-06-08 open Assets:Account4  HOOL   "NONE"
        """
        ...
    
    @loader.load_doc()
    def test_Close(self, entries, errors, __): # -> None:
        """
        2014-01-01 open  Assets:Account1
        2014-06-08 close Assets:Account1
        """
        ...
    
    @loader.load_doc()
    def test_Price(self, entries, errors, __): # -> None:
        """
        2014-06-08 price  BEAN   53.24 USD
        2014-06-08 price  USD   1.09 CAD
        """
        ...
    
    @loader.load_doc()
    def test_Event(self, entries, errors, __): # -> None:
        """
        2014-06-08 event "location" "New York, NY, USA"
        2014-06-08 event "employer" "Four Square"
        """
        ...
    
    def test_metadata(self): # -> None:
        ...
    


def characterize_spaces(text): # -> list[Any]:
    """Classify each line to a particular type.

    Args:
      text: A string, the text to classify.
    Returns:
      A list of line types, one for each line.
    """
    ...

class TestPrinterSpacing(unittest.TestCase):
    maxDiff = ...
    def test_interline_spacing(self): # -> None:
        ...
    


class TestDisplayContext(test_utils.TestCase):
    maxDiff = ...
    @loader.load_doc()
    def test_precision(self, entries, errors, options_map): # -> None:
        """
        2014-01-01 open Assets:Account
        2014-01-01 open Assets:Cash

        2014-07-01 *
          Assets:Account              1 INT
          Assets:Account            1.1 FP1
          Assets:Account          22.22 FP2
          Assets:Account        333.333 FP3
          Assets:Account      4444.4444 FP4
          Assets:Account    55555.55555 FP5
          Assets:Cash               -1 INT
          Assets:Cash             -1.1 FP1
          Assets:Cash           -22.22 FP2
          Assets:Cash         -333.333 FP3
          Assets:Cash       -4444.4444 FP4
          Assets:Cash     -55555.55555 FP5
        """
        ...
    


class TestPrinterAlignment(test_utils.TestCase):
    maxDiff = ...
    def test_align_position_strings(self): # -> None:
        ...
    
    @loader.load_doc()
    def test_align(self, entries, errors, options_map): # -> None:
        """
        2014-01-01 open Expenses:Commissions

        2014-07-01 * "Something"
          Expenses:Commissions  20000 USD
          Expenses:Commissions  9.9505 USD
          Expenses:Commissions  -20009.9505 USD
        """
        ...
    
    @loader.load_doc()
    def test_align_min_width_account(self, entries, errors, options_map): # -> None:
        """
        2014-01-01 open Expenses:Commissions

        2014-07-01 * "Something"
          Expenses:Commissions  20000 USD
          Expenses:Commissions  9.9505 USD
          Expenses:Commissions  -20009.9505 USD
        """
        ...
    
    @loader.load_doc()
    def test_align_with_weight(self, entries, errors, options_map): # -> None:
        """
        2014-01-01 open Assets:US:Investments:HOOL
        2014-01-01 open Expenses:Commissions
        2014-01-01 open Assets:US:Investments:Cash

        2014-07-01 * "Something"
          Assets:US:Investments:HOOL          45 HOOL {504.30 USD}
          Assets:US:Investments:HOOL           4 HOOL {504.30 USD, 2014-11-11}
          Expenses:Commissions            9.9520 USD
          Assets:US:Investments:Cash   -22473.32 CAD @ 1.10 USD
        """
        ...
    


class TestPrinterMisc(test_utils.TestCase):
    @loader.load_doc(expect_errors=True)
    def test_no_valid_account(self, entries, errors, options_map): # -> None:
        """
        2000-01-01 * "Test"
          Assets:Foo

        2000-01-01 * "Test"
          Assets:Foo
          Assets:Bar
        """
        ...
    
    def test_metadata(self): # -> None:
        ...
    
    def test_zero_cost(self): # -> None:
        ...
    
    def test_very_small_number(self): # -> None:
        ...
    
    def test_render_missing(self): # -> None:
        ...
    
    def test_render_meta_with_None(self): # -> None:
        ...
    


if __name__ == '__main__':
    ...
