"""
This type stub file was generated by pyright.
"""

import unittest
import sys
from pytest import mark
from beancount.parser import parser

"""
Tests for parser.
"""
__copyright__ = ...
__license__ = ...
class TestCompareTestFunctions(unittest.TestCase):
    def test_is_entry_incomplete(self): # -> None:
        ...
    


class TestParserDoc(unittest.TestCase):
    @parser.parse_doc(expect_errors=None)
    def test_parse_doc__disabled(self, entries, errors, options_map): # -> None:
        """
        2013-05-40 * "Nice dinner at Mermaid Inn"
          Expenses:Restaurant         100 USD
          Assets:US:Cash
        """
        ...
    
    @unittest.skipIf('/bazel/' in __file__, "Skipping test in Bazel")
    @mark.xfail
    @parser.parse_doc(expect_errors=False)
    def test_parse_doc__errors(self, _, __, ___): # -> None:
        """
        2013-05-40 * "Invalid date for parser"
          Expenses:Restaurant         100 USD
          Assets:US:Cash             -100 USD
        """
        ...
    
    @unittest.skipIf('/bazel/' in __file__, "Skipping test in Bazel")
    @mark.xfail
    @parser.parse_doc(expect_errors=True)
    def test_parse_doc__noerrors(self, _, __, ___): # -> None:
        """
        2013-05-01 * "Valid date for parser"
          Expenses:Restaurant         100 USD
          Assets:US:Cash             -100 USD
        """
        ...
    


class TestParserInputs(unittest.TestCase):
    """Try difference sources for the parser's input."""
    INPUT = ...
    def test_parse_string(self): # -> None:
        ...
    
    def test_parse_filename(self): # -> None:
        ...
    
    def test_parse_file(self): # -> None:
        ...
    
    @classmethod
    def parse_stdin(cls): # -> None:
        ...
    
    def test_parse_stdin(self): # -> None:
        ...
    
    def test_parse_None(self): # -> None:
        ...
    


class TestUnicodeErrors(unittest.TestCase):
    test_utf8_string = ...
    expected_utf8_string = ...
    test_latin1_string = ...
    expected_latin1_string = ...
    def test_bytes_encoded_utf8(self): # -> None:
        ...
    
    def test_bytes_encoded_incorrect(self): # -> None:
        ...
    
    def test_bytes_encoded_latin1(self): # -> None:
        ...
    
    def test_bytes_encoded_invalid(self): # -> None:
        ...
    


class TestTestUtils(unittest.TestCase):
    def test_parse_many(self): # -> None:
        ...
    
    def test_parse_one(self): # -> None:
        ...
    


@unittest.skipUnless(hasattr(sys, 'getrefcount'), 'requires sys.getrefcount()')
class TestReferenceCounting(unittest.TestCase):
    def test_parser_lex(self): # -> None:
        ...
    
    def test_parser_lex_filename(self): # -> None:
        ...
    
    def test_parser_lex_multi(self): # -> None:
        ...
    
    def test_parser_parse(self): # -> None:
        ...
    


class TestLineno(unittest.TestCase):
    def test_lex(self): # -> None:
        ...
    
    def test_lex_lineno(self): # -> None:
        ...
    
    def test_parse(self): # -> None:
        ...
    
    def test_parse_lineno(self): # -> None:
        ...
    
    def test_parse_string(self): # -> None:
        ...
    
    def test_parse_string_lineno(self): # -> None:
        ...
    
    @parser.parse_doc()
    def test_parse_doc(self, entries, errors, _): # -> None:
        """
          2013-01-01 open Assets:US:Cash

          2013-05-18 * "Nice dinner at Mermaid Inn"
            Expenses:Restaurant         100 USD
            Assets:US:Cash             -100 USD

          2013-05-19 balance  Assets:US:Cash   -100 USD

          2013-05-20 note  Assets:US:Cash   "Something"
        """
        ...
    


if __name__ == '__main__':
    ...
