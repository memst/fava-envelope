"""
This type stub file was generated by pyright.
"""

import unittest

"""Support utilities for testing scripts.
"""
__copyright__ = ...
__license__ = ...
class TestError(Exception):
    """Errors within the test implementation itself. These should never occur."""
    ...


def read_string_or_entries(entries_or_str, allow_incomplete=...): # -> list[Any]:
    """Read a string of entries or just entries.

    Args:
      entries_or_str: Either a list of directives, or a string containing directives.
      allow_incomplete: A boolean, true if we allow incomplete inputs and perform
        light-weight booking.
    Returns:
      A list of directives.
    """
    ...

class TestCase(unittest.TestCase):
    def assertEqualEntries(self, expected_entries, actual_entries): # -> None:
        ...
    
    def assertIncludesEntries(self, subset_entries, entries): # -> None:
        ...
    
    def assertExcludesEntries(self, subset_entries, entries): # -> None:
        ...
    


DEFAULT_FAILFUNC = ...
def assertEqualEntries(expected_entries, actual_entries, failfunc=..., allow_incomplete=...): # -> None:
    """Compare two lists of entries exactly and print missing entries verbosely if
    they occur.

    Args:
      expected_entries: Either a list of directives or a string, in which case the
        string is run through beancount.parser.parse_string() and the resulting
        list is used.
      actual_entries: Same treatment as expected_entries, the other list of
        directives to compare to.
      failfunc: A function to call on failure.
      allow_incomplete: A boolean, true if we allow incomplete inputs and perform
        light-weight booking.
    Raises:
      AssertionError: If the exception fails.
    """
    ...

def assertIncludesEntries(subset_entries, entries, failfunc=..., allow_incomplete=...): # -> None:
    """Check that subset_entries is included in entries and print missing entries.

    Args:
      subset_entries: Either a list of directives or a string, in which case the
        string is run through beancount.parser.parse_string() and the resulting
        list is used.
      entries: Same treatment as subset_entries, the other list of
        directives to compare to.
      failfunc: A function to call on failure.
      allow_incomplete: A boolean, true if we allow incomplete inputs and perform
        light-weight booking.
    Raises:
      AssertionError: If the exception fails.
    """
    ...

def assertExcludesEntries(subset_entries, entries, failfunc=..., allow_incomplete=...): # -> None:
    """Check that subset_entries is not included in entries and print extra entries.

    Args:
      subset_entries: Either a list of directives or a string, in which case the
        string is run through beancount.parser.parse_string() and the resulting
        list is used.
      entries: Same treatment as subset_entries, the other list of
        directives to compare to.
      failfunc: A function to call on failure.
      allow_incomplete: A boolean, true if we allow incomplete inputs and perform
        light-weight booking.
    Raises:
      AssertionError: If the exception fails.
    """
    ...

