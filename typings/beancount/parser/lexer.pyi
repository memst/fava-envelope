"""
This type stub file was generated by pyright.
"""

"""Beancount syntax lexer.
"""
__copyright__ = ...
__license__ = ...
LexerError = ...
class LexBuilder:
    """A builder used only for building lexer objects."""
    def __init__(self) -> None:
        ...
    
    def build_lexer_error(self, filename, lineno, message): # -> None:
        """Build a lexer error and appends it to the list of pending errors.

        Args:
          message: The message of the error.
        """
        ...
    


def lex_iter(file, builder=..., encoding=...): # -> Generator[Any, Any, None]:
    """An iterator that yields all the tokens in the given file.

    Args:
      file: A string, the filename to run the lexer on, or a file object.
      builder: A builder of your choice. If not specified, a LexBuilder is
        used and discarded (along with its errors).
      encoding: A string (or None), the default encoding to use for strings.
    Yields:
      All the tokens in the input file as ``(token, lineno, text,
      value)`` tuples where ``token`` is a string representing the
      token kind, ``lineno`` is the line number in the input file
      where the token was matched, ``mathed`` is a bytes object
      containing the exact text matched, and ``value`` is the semantic
      value of the token or None.
    """
    ...

def lex_iter_string(string, builder=..., **kwargs): # -> Generator[Any, Any, None]:
    """An iterator that yields all the tokens in the given string.

    Args:
      string: a str or bytes, the contents of the ledger to be parsed.
    Returns:
      An iterator, see ``lex_iter()`` for details.
    """
    ...

