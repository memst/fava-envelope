"""
This type stub file was generated by pyright.
"""

"""Implementations of all the particular booking methods.
This code is used by the full booking algorithm.
"""
__copyright__ = ...
__license__ = ...
AmbiguousMatchError = ...
def handle_ambiguous_matches(entry, posting, matches, method): # -> tuple[list[Any], list[Any], list[Any]]:
    """Handle ambiguous matches by dispatching to a particular method.

    Args:
      entry: The parent Transaction instance.
      posting: An instance of Posting, the reducing posting which we're
        attempting to match.
      matches: A list of matching Position instances from the ante-inventory.
        Those positions are known to already match the 'posting' spec.
      methods: A mapping of account name to their corresponding booking
        method.
    Returns:
      A pair of
        booked_reductions: A list of matched Posting instances, whose 'cost'
          attributes are ensured to be of type Cost.
        errors: A list of errors to be generated.
    """
    ...

def booking_method_STRICT(entry, posting, matches): # -> tuple[list[Any], list[Any], list[Any], Any | Literal[False]]:
    """Strict booking method.

    Args:
      entry: The parent Transaction instance.
      posting: An instance of Posting, the reducing posting which we're
        attempting to match.
      matches: A list of matching Position instances from the ante-inventory.
        Those positions are known to already match the 'posting' spec.
    Returns:
      A triple of
        booked_reductions: A list of matched Posting instances, whose 'cost'
          attributes are ensured to be of type Cost.
        errors: A list of errors to be generated.
        insufficient: A boolean, true if we could not find enough matches
          to fulfill the reduction.
    """
    ...

def booking_method_FIFO(entry, posting, matches): # -> tuple[list[Any], list[Any], list[Any], Any]:
    """FIFO booking method implementation."""
    ...

def booking_method_LIFO(entry, posting, matches): # -> tuple[list[Any], list[Any], list[Any], Any]:
    """LIFO booking method implementation."""
    ...

def booking_method_HIFO(entry, posting, matches): # -> tuple[list[Any], list[Any], list[Any], Any]:
    """HIFO booking method implementation."""
    ...

def booking_method_NONE(entry, posting, matches): # -> tuple[list[Any], list[Any], Literal[False]]:
    """NONE booking method implementation."""
    ...

def booking_method_AVERAGE(entry, posting, matches): # -> tuple[list[Any], list[Any], list[AmbiguousMatchError], Literal[False]]:
    """AVERAGE booking method implementation."""
    ...

_BOOKING_METHODS = ...
